{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/CreateInput/my-app/src/component/TextAfter.js\";\nimport React, { Component } from 'react';\nimport TextBefore from './TextBefore';\n\nclass TextAfter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      text: ' ',\n      hed: 14,\n      fontSize: '',\n      textColor: '',\n      textAfterColor: \"\",\n      selectedColour: yourDefaultColour\n    };\n\n    this.hendelonChange = event => {\n      this.setState({\n        [event.target.id]: event.target.value\n      });\n    };\n\n    this.clearColourWheel = () => {\n      this.colourWheel.clear(() => {\n        // Do some other stuff in this callback if you want -- other than re-setting your selectedColour.\n        this.setState({\n          selectedColour: yourDefaultColour\n        });\n      });\n    };\n\n    this.hedOnclick = () => {\n      if (this.state.hed == 14) {\n        this.setState({\n          hed: 27\n        });\n      } else this.setState({\n        hed: 14\n      });\n    };\n  }\n\n  render() {\n    console.log(this.state.hed);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"boxInput\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }\n    }, \"Text\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"text\",\n      name: \"text\",\n      onChange: this.hendelonChange,\n      value: this.state.text,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }\n    }, \"Height\"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"hed\",\n      type: \"number\",\n      name: \"hed\",\n      onChange: this.hedOnclick,\n      value: this.state.hed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }, \"fontSize\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      id: \"fontSize\",\n      name: \"fontSize\",\n      onChange: this.hendelonChange,\n      value: this.state.fontSize,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"color\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }, \"color\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"color\",\n      id: \"textAfterColor\",\n      className: \"inputColor\",\n      value: this.state.textAfterColor,\n      onChange: this.hendelonChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      className: \"textColor\",\n      id: \"textAfterColors\",\n      value: this.state.textAfterColor,\n      onChange: this.hendelonChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"color\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }, \"color\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"color\",\n      id: \"textColor\",\n      className: \"inputColor\",\n      value: this.state.textColor,\n      onChange: this.hendelonChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      className: \"textColor\",\n      id: \"textColors\",\n      value: this.state.textColor,\n      onChange: this.hendelonChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }))), /*#__PURE__*/React.createElement(ColourWheel, {\n      radius: 200,\n      padding: 10,\n      lineWidth: 50,\n      onColourSelected: rgb => this.setState({\n        selectedColour: rgb\n      }),\n      onRef: ref => this.colourWheel = ref,\n      spacers: {\n        colour: '#FFFFFF',\n        shadowColour: 'grey',\n        shadowBlur: 5\n      },\n      preset: true // You can set this bool depending on whether you have a pre-selected colour in state.\n      ,\n      presetColour: this.state.selectedColour,\n      animated: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(TextBefore, {\n      store: this.state,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default TextAfter;","map":{"version":3,"sources":["/home/user/Desktop/CreateInput/my-app/src/component/TextAfter.js"],"names":["React","Component","TextBefore","TextAfter","state","text","hed","fontSize","textColor","textAfterColor","selectedColour","yourDefaultColour","hendelonChange","event","setState","target","id","value","clearColourWheel","colourWheel","clear","hedOnclick","render","console","log","rgb","ref","colour","shadowColour","shadowBlur"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport TextBefore from './TextBefore';\n\n\n\n class TextAfter extends Component {\n  state={\n    text:' ',\n    hed:14,\n    fontSize:'',\n    textColor:'',\n    textAfterColor:\"\",\n    selectedColour: yourDefaultColour,\n  }\n  hendelonChange=(event)=>{\n    this.setState({ [event.target.id]: event.target.value});\n  }\n  clearColourWheel = () => {\n    this.colourWheel.clear(() => {\n      // Do some other stuff in this callback if you want -- other than re-setting your selectedColour.\n      this.setState({ selectedColour: yourDefaultColour })\n    })\n  }\n\nhedOnclick=()=>{\n  if(this.state.hed==14){\n    this.setState({hed:27})\n  }else\n  this.setState({hed:14})\n }\n  render() {\nconsole.log(this.state.hed)\n    return (\n      <div className=\"boxInput\">\n        <form >\n          <label>Text</label>\n          <input\n            type=\"text\"\n            id=\"text\"\n            name=\"text\"\n            onChange={this.hendelonChange}\n            value={this.state.text}\n          />\n          <label>Height</label>\n          <input \n          id='hed'\n          type=\"number\" \n          name=\"hed\"\n          onChange={this.hedOnclick}\n          value={this.state.hed} />\n          <label>fontSize</label>\n          <input type=\"number\"\n           id=\"fontSize\"\n           name=\"fontSize\"\n           onChange={this.hendelonChange}\n           value={this.state.fontSize} />              \n          <div className=\"color\">\n          <label>color</label>\n          <input type=\"color\" id=\"textAfterColor\" className=\"inputColor\" value={this.state.textAfterColor}onChange={this.hendelonChange} />\n          <input type=\"text\" className='textColor' id=\"textAfterColors\" value={this.state.textAfterColor} onChange={this.hendelonChange}/>\n          </div>              \n          <div className=\"color\">\n          <label>color</label>\n          <input type=\"color\" id=\"textColor\" className=\"inputColor\" value={this.state.textColor}onChange={this.hendelonChange} />\n          <input type=\"text\" className='textColor' id=\"textColors\" value={this.state.textColor} onChange={this.hendelonChange}/>\n          </div>\n        </form>\n        <ColourWheel\n          radius={200}\n          padding={10}\n          lineWidth={50}\n          onColourSelected={(rgb) => this.setState({ selectedColour: rgb })}\n          onRef={ref => (this.colourWheel = ref)}\n          spacers={{\n            colour: '#FFFFFF',\n            shadowColour: 'grey',\n            shadowBlur: 5\n          }}\n          preset // You can set this bool depending on whether you have a pre-selected colour in state.\n          presetColour={this.state.selectedColour}\n          animated\n        />\n        <TextBefore store={this.state}/>\n      </div>\n    )\n  }\n}\n\nexport default TextAfter"]},"metadata":{},"sourceType":"module"}
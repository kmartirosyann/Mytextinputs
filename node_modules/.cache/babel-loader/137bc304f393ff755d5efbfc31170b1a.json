{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/CreateInput/my-app/src/component/TextAfter.js\";\nimport React, { Component } from \"react\";\nimport TextBefore from \"./TextBefore\";\nimport ColourWheel from \"./colourWheel/ColourWheel\";\nconst yourDefaultColour = \"rgb(255, 255, 255)\";\n\nclass TextAfter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      text: \" \",\n      hed: 14,\n      fontSize: \"\",\n      textColor: \"\",\n      none: \"none\",\n      hd: \"hd\",\n      selectedColour: yourDefaultColour\n    };\n\n    this.hendelonChange = event => {\n      this.setState({\n        [event.target.id]: event.target.value\n      });\n    };\n\n    this.clearColourWheel = () => {\n      this.colourWheel.clear(() => {\n        // Do some other stuff in this callback if you want -- other than re-setting your selectedColour.\n        this.setState({\n          selectedColour: yourDefaultColour\n        });\n      });\n    };\n\n    this.hendelOnclick = () => {\n      if (this.state.none == \"none\" && this.state.hd == \"hd\") {\n        this.setState({\n          none: \"blok\",\n          hd: \"hdRed\"\n        });\n      } else this.setState({\n        none: \"none\",\n        hd: \"hd\"\n      });\n    };\n\n    this.hedOnclick = () => {\n      if (this.state.hed == 14) {\n        this.setState({\n          hed: 27\n        });\n      } else this.setState({\n        hed: 14\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"boxInput\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }\n    }, \"Text\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"text\",\n      name: \"text\",\n      onChange: this.hendelonChange,\n      value: this.state.text,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    }, \"Height\"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"hed\",\n      type: \"number\",\n      name: \"hed\",\n      onChange: this.hedOnclick,\n      value: this.state.hed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, \"FontSize\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      id: \"fontSize\",\n      name: \"fontSize\",\n      onChange: this.hendelonChange,\n      value: this.state.fontSize,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      onClick: this.hendelOnclick,\n      className: this.state.hd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }, \"Color\", /*#__PURE__*/React.createElement(\"i\", {\n      className: \"material-icons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 18\n      }\n    }, \"color_lens\")), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: this.state.none,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(ColourWheel, {\n      radius: 200,\n      padding: 10,\n      lineWidth: 50,\n      onColourSelected: rgb => this.setState({\n        selectedColour: rgb\n      }),\n      onRef: ref => this.colourWheel = ref,\n      spacers: {\n        colour: \"#FFFFFF\",\n        shadowColour: \"grey\",\n        shadowBlur: 5\n      },\n      preset: true // You can set this bool depending on whether you have a pre-selected colour in state.\n      ,\n      presetColour: this.state.selectedColour,\n      animated: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(TextBefore, {\n      store: this.state,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default TextAfter;","map":{"version":3,"sources":["/home/user/Desktop/CreateInput/my-app/src/component/TextAfter.js"],"names":["React","Component","TextBefore","ColourWheel","yourDefaultColour","TextAfter","state","text","hed","fontSize","textColor","none","hd","selectedColour","hendelonChange","event","setState","target","id","value","clearColourWheel","colourWheel","clear","hendelOnclick","hedOnclick","render","rgb","ref","colour","shadowColour","shadowBlur"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport TextBefore from \"./TextBefore\";\nimport ColourWheel from \"./colourWheel/ColourWheel\";\n\nconst yourDefaultColour = \"rgb(255, 255, 255)\";\n\nclass TextAfter extends Component {\n  state = {\n    text: \" \",\n    hed: 14,\n    fontSize: \"\",\n    textColor: \"\",\n    none: \"none\",\n    hd: \"hd\",\n    selectedColour: yourDefaultColour,\n  };\n  hendelonChange = (event) => {\n    this.setState({ [event.target.id]: event.target.value });\n  };\n  clearColourWheel = () => {\n    this.colourWheel.clear(() => {\n      // Do some other stuff in this callback if you want -- other than re-setting your selectedColour.\n      this.setState({ selectedColour: yourDefaultColour });\n    });\n  };\n  hendelOnclick = () => {\n    if (this.state.none == \"none\" && this.state.hd == \"hd\") {\n      this.setState({ none: \"blok\", hd: \"hdRed\" });\n    } else this.setState({ none: \"none\", hd: \"hd\" });\n  };\n\n  hedOnclick = () => {\n    if (this.state.hed == 14) {\n      this.setState({ hed: 27 });\n    } else this.setState({ hed: 14 });\n  };\n  render() {\n    return (\n      <div className=\"boxInput\">\n        <form>\n          <label>Text</label>\n          <input\n            type=\"text\"\n            id=\"text\"\n            name=\"text\"\n            onChange={this.hendelonChange}\n            value={this.state.text}\n          />\n          <label>Height</label>\n          <input\n            id=\"hed\"\n            type=\"number\"\n            name=\"hed\"\n            onChange={this.hedOnclick}\n            value={this.state.hed}\n          />\n          <label>FontSize</label>\n          <input\n            type=\"number\"\n            id=\"fontSize\"\n            name=\"fontSize\"\n            onChange={this.hendelonChange}\n            value={this.state.fontSize}\n          />\n\n          <br />\n          <br />\n          <div onClick={this.hendelOnclick} className={this.state.hd}>\n            Color<i className=\"material-icons\">color_lens</i>\n          </div>\n          <hr />\n          <div className={this.state.none}>\n            <ColourWheel\n              radius={200}\n              padding={10}\n              lineWidth={50}\n              onColourSelected={(rgb) => this.setState({ selectedColour: rgb })}\n              onRef={(ref) => (this.colourWheel = ref)}\n              spacers={{\n                colour: \"#FFFFFF\",\n                shadowColour: \"grey\",\n                shadowBlur: 5,\n              }}\n              preset // You can set this bool depending on whether you have a pre-selected colour in state.\n              presetColour={this.state.selectedColour}\n              animated\n            />\n          </div>\n        </form>\n        <TextBefore store={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default TextAfter;\n"]},"metadata":{},"sourceType":"module"}
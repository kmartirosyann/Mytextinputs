{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/CreateInput/my-app/src/component/TextBefore.js\";\nimport React, { Component } from 'react';\nimport TextMiddle from './TextMiddle';\nimport ColourWheel from \"./colourWheel/ColourWheel\";\nconst yourDefaultColour = \"rgb(255, 255, 255)\";\n\nclass TextBefore extends Component {\n  constructor(props) {\n    super(props);\n\n    this.hendelonChange = event => {\n      this.setState({\n        [event.target.id]: event.target.value\n      });\n    };\n\n    this.clearColourWheel = () => {\n      this.colourWheel.clear(() => {\n        // Do some other stuff in this callback if you want -- other than re-setting your selectedColour.\n        this.setState({\n          selectedColour: yourDefaultColour\n        });\n      });\n    };\n\n    this.hendelOnclick1 = () => {\n      if (this.state.blok == \"blok\") {\n        this.setState({\n          blok: \"none\"\n        });\n      } else this.setState({\n        blok: \"blok\"\n      });\n    };\n\n    this.hedOnclick = () => {\n      if (this.state.hed3 == 18) {\n        this.setState({\n          hed3: 25\n        });\n      } else this.setState({\n        hed3: 18\n      });\n    };\n\n    this.state = {\n      hed3: 18,\n      blok: \"blok\",\n      selectedColour: yourDefaultColour\n    };\n  }\n\n  render() {\n    console.log(this.state.blok);\n    const {\n      selectedColour\n    } = this.state;\n    const state = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: \"hed3\",\n      type: \"number\",\n      onChange: this.hedOnclick,\n      value: this.state.hed3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      onClick: this.hendelOnclick1,\n      className: \"hd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    }, \"Color\", /*#__PURE__*/React.createElement(\"i\", {\n      className: \"material-icons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 18\n      }\n    }, \"color_lens\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(ColourWheel, {\n      radius: 200,\n      padding: 10,\n      lineWidth: 50,\n      onColourSelected: rgb => this.setState({\n        selectedColour: rgb\n      }),\n      onRef: ref => this.colourWheel = ref,\n      spacers: {\n        colour: \"#FFFFFF\",\n        shadowColour: \"grey\",\n        shadowBlur: 5\n      },\n      preset: true // You can set this bool depending on whether you have a pre-selected colour in state.\n      ,\n      presetColour: this.state.selectedColour,\n      animated: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(TextMiddle, {\n      state: state,\n      state1: this.state,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default TextBefore;","map":{"version":3,"sources":["/home/user/Desktop/CreateInput/my-app/src/component/TextBefore.js"],"names":["React","Component","TextMiddle","ColourWheel","yourDefaultColour","TextBefore","constructor","props","hendelonChange","event","setState","target","id","value","clearColourWheel","colourWheel","clear","selectedColour","hendelOnclick1","state","blok","hedOnclick","hed3","render","console","log","rgb","ref","colour","shadowColour","shadowBlur"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport TextMiddle from './TextMiddle';\nimport ColourWheel from \"./colourWheel/ColourWheel\";\n\nconst yourDefaultColour = \"rgb(255, 255, 255)\";\n\nclass TextBefore extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      hed3:18,\n      blok: \"blok\",\n      selectedColour: yourDefaultColour,\n    }\n  }\n  hendelonChange = (event) => {\n   \n    this.setState({ [event.target.id]: event.target.value});\n};\nclearColourWheel = () => {\n  this.colourWheel.clear(() => {\n    // Do some other stuff in this callback if you want -- other than re-setting your selectedColour.\n    this.setState({ selectedColour: yourDefaultColour });\n  });\n};\nhendelOnclick1 = () => {\n  if (this.state.blok == \"blok\") {\n    this.setState({ blok: \"none\" });\n  } else this.setState({ blok: \"blok\" });\n};\nhedOnclick=()=>{\n  if(this.state.hed3==18){\n    this.setState({hed3:25})\n  }else\n  this.setState({hed3:18})\n }\n  render() {\n    console.log(this.state.blok)\n    const { selectedColour } = this.state;\n    const state=this.props\n    return (\n      <div>\n        <form>\n        <input\n        id=\"hed3\" \n          type=\"number\" \n          onChange={this. hedOnclick}\n          value={this.state.hed3} />              \n          <div onClick={this.hendelOnclick1} className=\"hd\">\n            Color<i className=\"material-icons\">color_lens</i>\n          </div>\n          <div >\n            <ColourWheel\n              radius={200}\n              padding={10}\n              lineWidth={50}\n              onColourSelected={(rgb) => this.setState({ selectedColour: rgb })}\n              onRef={(ref) => (this.colourWheel = ref)}\n              spacers={{\n                colour: \"#FFFFFF\",\n                shadowColour: \"grey\",\n                shadowBlur: 5,\n              }}\n              preset // You can set this bool depending on whether you have a pre-selected colour in state.\n              presetColour={this.state.selectedColour}\n              animated\n            />\n          </div>\n        </form>\n        <TextMiddle state={state} state1={this.state}/>\n      </div>\n    )\n  }\n}\n\nexport default TextBefore"]},"metadata":{},"sourceType":"module"}